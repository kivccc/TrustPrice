# 워크플로우 이름
name: Deploy Spring Boot & React to EC2

# 워크플로우 실행 트리거 설정: main 브랜치에 push 이벤트가 발생했을 때 실행
on:
  push:
    branches: [ "main" ]

# 실행될 작업(Job) 정의
jobs:
  build-and-deploy:
    # 작업이 실행될 가상 머신 환경
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 21 (Amazon Corretto) 환경 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      # 3. Node.js 20.x 환경 설정 (npm 의존성 캐싱 포함)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 4. gradlew 스크립트에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./BackEnd

      # 5. Gradle을 이용한 프로젝트 빌드 (스프링 부트 + 리액트)
      - name: Build with Gradle
        run: ./gradlew build --no-daemon
        working-directory: ./BackEnd

      # 6. 빌드된 JAR 파일을 EC2 인스턴스로 복사 (SCP)
      - name: Transfer JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: "BackEnd/build/libs/*-SNAPSHOT.jar"
          target: "/home/ubuntu/app"

      # 7. EC2 인스턴스에서 애플리케이션 실행 스크립트 실행 (SSH)
      - name: Execute deployment script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # 기존에 실행 중이던 Java 애플리케이션 프로세스를 종료합니다.
            # 프로세스가 없어서 오류가 나도 다음 스크립트를 계속 실행하기 위해 '|| true'를 추가합니다.
            pgrep java | xargs kill -9 || true
            
            # 새로 배포된 JAR 파일을 백그라운드에서 실행합니다.
            # 로그는 /dev/null로 보내 출력을 남기지 않습니다.
            nohup java -jar /home/ubuntu/app/BackEnd/build/libs/*.jar  > /dev/null 2>&1 &
            
